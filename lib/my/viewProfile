import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:flutter_icons/flutter_icons.dart';
import 'package:intl/intl.dart';
import 'package:smooth_star_rating/smooth_star_rating.dart';
import 'package:wanas/Models/ProfileTile.dart';
import 'package:wanas/my/myprofile.dart' as myid;

class ViewProfile extends StatefulWidget {
  final String id;
  final String hisname;

  ViewProfile(this.id, this.hisname);
  @override
  _ViewProfileState createState() => _ViewProfileState();
}

class _ViewProfileState extends State<ViewProfile> {
  getOldRate() async {
    var oldRate;
    await FirebaseFirestore.instance
        .collection('Users')
        .doc(myid.loggedInUser.uid)
        .collection('UsersIRated')
        .doc(widget.id)
        .get()
        .then((DocumentSnapshot userSnapshot) {
      if (userSnapshot.exists) {
        oldRate = userSnapshot['stars'];
      } else {
        oldRate = 0.0;
      }
    });
    return oldRate;
  }

  getStars() async {
    var stars;
    await FirebaseFirestore.instance
        .collection('Users')
        .doc(widget.id)
        .get()
        .then((DocumentSnapshot userSnapshot) {
      stars = userSnapshot['userStars'];
    });
    return stars;
  }

  getNumberOfUsersRated() async {
    var numberOfUsers;
    await FirebaseFirestore.instance
        .collection('Users')
        .doc(widget.id)
        .get()
        .then((DocumentSnapshot userSnapshot) {
      numberOfUsers = userSnapshot['numUsersRatedMe'];
    });
    return numberOfUsers;
  }

  updateAvgRate(double stars, int numberOfUsers) {
    FirebaseFirestore.instance.collection('Users').doc(widget.id).update({
      'numUsersRatedMe': numberOfUsers,
      'userStars': stars,
    });
  }

  updateUsersIRated() {
    FirebaseFirestore.instance
        .collection('Users')
        .doc(myid.loggedInUser.uid)
        .collection('UsersIRated')
        .doc(widget.id)
        .set({
      'id': widget.id,
      'stars': newRate,
    });
  }

  String name;
  double newRate = 0.0;
  var oldRate;
  var stars;
  var numUsersRatedMe;
  rateDialog(BuildContext context) {
    // set up the buttons
    Widget cancel = FlatButton(
      child: Text(
        "Cancel",
        style: TextStyle(color: Colors.black),
      ),
      onPressed: () {
        Navigator.pop(context);
      },
    );
    Widget rate = FlatButton(
      child: Text(
        "Rate",
        style: TextStyle(color: Colors.black),
      ),
      onPressed: () async {
        oldRate = getOldRate();
        oldRate = await oldRate;
        print(oldRate);
        getOldRate();
        //if its not hte first time to rate this user ,,
        if (oldRate != 0.0) {
          stars = getStars();
          stars = await stars;
          stars = stars - oldRate;
          stars = stars + newRate;

          numUsersRatedMe = getNumberOfUsersRated();
          numUsersRatedMe = await numUsersRatedMe;

          updateUsersIRated();
          updateAvgRate(stars, numUsersRatedMe);
        } else {
          //if its the first time to rate this user,,
          stars = getStars();
          stars = await stars;
          stars = stars + newRate;

          numUsersRatedMe = getNumberOfUsersRated();
          numUsersRatedMe = await numUsersRatedMe + 1;
          updateUsersIRated();
          updateAvgRate(stars, numUsersRatedMe);
        }
        Navigator.pop(context);
      },
    );

    // set up the AlertDialog
    AlertDialog alert = AlertDialog(
      insetPadding: EdgeInsets.symmetric(horizontal: MediaQuery.of(context).size.width * .1,vertical: MediaQuery.of(context).size.height * .18),
      title: Text("Rate"),
      content: Container(
        alignment: Alignment.center,
        child: SmoothStarRating(
          borderColor: Colors.black,
          color: Colors.black,
          rating: newRate,
          isReadOnly: false,
          size: MediaQuery.of(context).size.width * .1,
          filledIconData: Icons.star,
          halfFilledIconData: Icons.star_half,
          defaultIconData: Icons.star_border,
          starCount: 5,
          allowHalfRating: true,
          spacing: 2.0,
          onRated: (value) {
            newRate = value;
          },
        ),
      ),
      actions: [
        cancel,
        rate,
      ],
      
    );

    // show the dialog
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return alert;
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
          //      key: _scaffoldKey,
          appBar: AppBar(
            title: Text(
              widget.hisname,
            ),
            backgroundColor: Colors.black,
            actions: [
              TextButton(
                child: Text(
                  'Rate',
                  style: TextStyle(color: Colors.white),
                ),
                onPressed: () {
                  rateDialog(context);
                },
              )
            ],
          ),
          body: ListView(
            children: [
              Padding(
                padding: const EdgeInsets.only(top: 15.0),
                child: Column(
                  children: <Widget>[
                    StreamBuilder(
                        stream: FirebaseFirestore.instance
                            .collection('Users')
                            .doc(widget.id)
                            .snapshots(),
                        builder: (context, snapshot) {
                          if (!snapshot.hasData) {
                            /* return Center(
                              child: SpinKitCircle(
                                color: Colors.white,
                                size: 100.0,
                              ), 
                            );*/
                            return Text('');
                          }
                          double rate;
                          int usersRatedMe = snapshot.data['numUsersRatedMe'];
                          if (usersRatedMe == 0) {
                            rate = 0.0;
                          } else {
                            rate = snapshot.data['userStars'] /
                                snapshot.data['numUsersRatedMe'];
                          }
                          String name = snapshot.data['name'];
                          String email = snapshot.data['email'];
                          String about = snapshot.data['about'];
                          String photo = snapshot.data['photoUrl'];
                          Timestamp time = snapshot.data['timeCreation'];
                          String timeCreation =
                              DateFormat("dd/MM/yyyy").format(time.toDate());
                          String age = snapshot.data['age'];
                          String gender = snapshot.data['gender'];

                          return Column(
                            children: <Widget>[
                              photo.length == 0
                                  ? GestureDetector(
                                      //  child: CircleAvatar(
                                      //    backgroundColor: Colors.grey,
                                      /*  backgroundImage: AssetImage(
                                              'assets/defProfile.jpg'),*/
                                      child: Hero(
                                        transitionOnUserGestures: true,
                                        tag: 'defHero',
                                        child: CircleAvatar(
                                          backgroundColor: Colors.transparent,
                                          child: Container(
                                            //width: 500,
                                            //height: 200,
                                            decoration: BoxDecoration(
                                              shape: BoxShape.circle,
                                              image: DecorationImage(
                                                fit: BoxFit.fill,
                                                image: AssetImage(
                                                    'assets/defProfile.jpg'),
                                              ),
                                            ),
                                          ),
                                          radius: 100,
                                        ),
                                      ),
                                      //      radius: 100,
                                      //      ),
                                      onTap: () {
                                        Navigator.push(context,
                                            MaterialPageRoute(builder: (_) {
                                          return DefHero();
                                        }));
                                      })
                                  : GestureDetector(
                                      //    child: CircleAvatar(
                                      //     backgroundColor: Colors.grey,
                                      /*   backgroundImage: NetworkImage(
                                              photo), */

                                      child: Hero(
                                        transitionOnUserGestures: true,
                                        tag: 'profileHero',
                                        child: CircleAvatar(
                                          backgroundColor: Colors.transparent,
                                          child: Container(
                                            //width: 500,
                                            //height: 200,
                                            decoration: BoxDecoration(
                                              shape: BoxShape.circle,
                                              image: DecorationImage(
                                                fit: BoxFit.fill,
                                                image: NetworkImage(photo),
                                              ),
                                            ),
                                          ),
                                          radius: 100,
                                        ),
                                      ),
                                      //      radius: 100,
                                      //       ),
                                      onTap: () {
                                        Navigator.push(context,
                                            MaterialPageRoute(builder: (_) {
                                          return ProfHero(photo);
                                        }));
                                      }),
                              ProfileTile('Name', name, Icons.person),
                              ProfileTile('Email', email, Icons.email),
                              ProfileTile('About', about,
                                  FlutterIcons.pencil_alt_faw5s),
                              ProfileTile(
                                'Rate',
                                "${rate.toStringAsFixed(1)}/5 ($usersRatedMe)",
                                Icons.star_half,
                              ),
                              ProfileTile(
                                  'Age', age, FlutterIcons.birthday_cake_faw),
                              ProfileTile('Gender', gender,
                                  FlutterIcons.gender_male_mco),
                              ProfileTile('Creation date', timeCreation,
                                  Icons.access_time)
                            ],
                          );
                        })
                  ],
                ),
              ),
            ],
          )),
    );
  }
}

class DefHero extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: GestureDetector(
        child: Center(
          child: Hero(
            tag: 'defHero',
            child: Image.asset('assets/defProfile.jpg'),
          ),
        ),
        onTap: () {
          Navigator.pop(context);
        },
      ),
    );
  }
}

class ProfHero extends StatelessWidget {
  final String prof;
  ProfHero(this.prof);
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: GestureDetector(
        child: Center(
          child: Hero(
            tag: 'profileHero',
            child: Image.network(prof),
          ),
        ),
        onTap: () {
          Navigator.pop(context);
        },
      ),
    );
  }
}
