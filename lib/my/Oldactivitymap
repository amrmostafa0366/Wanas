//////////////////////OLD ACTIVITY MAP/////////////////////////
/*

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:flutter_icons/flutter_icons.dart';
import 'package:wanas/my/activities.dart';
import 'package:wanas/my/menu.dart';
import 'package:wanas/my/myprofile.dart' as myid;
import 'package:wanas/my/userProfile.dart';
import 'dart:math' show cos, sqrt, asin, acos, sin, pi;

class ActivityMap extends StatefulWidget {
  final String activity;
  final lat, long;
  ActivityMap(this.activity, this.lat, this.long);
  @override
  _ActivityMapState createState() => _ActivityMapState();
}

class _ActivityMapState extends State<ActivityMap> with WidgetsBindingObserver {
  Future _data;

/*
  getUsersWithTheSameActivity() async {
    var firestore = Firestore.instance;
    QuerySnapshot qn = await firestore
        .collection('Users')
        .where('activity', isEqualTo: widget.activity)
        .getDocuments();

    return qn.documents;
  }
*/
  Future getUsers() async {
    var firestore = FirebaseFirestore.instance;
    QuerySnapshot lt = await firestore
        .collection('Users')
        .where(
          'id',
          isLessThan: myid.loggedInUser.uid,
        )
        .get();

    QuerySnapshot gt = await firestore
        .collection('Users')
        .where(
          'id',
          isGreaterThan: myid.loggedInUser.uid,
        )
        .get();

    var usersExceptMe = lt.docs + gt.docs;
    var usersExceptMeWithSameActivity = [];
    for (int i = 0; i < usersExceptMe.length; ++i) {
      if (widget.activity == usersExceptMe[i]['activity']) {
        usersExceptMeWithSameActivity.add(usersExceptMe[i]);
      }
    }
    return usersExceptMeWithSameActivity;
  }

  navigateToUser(String id, String hisname) {
    Navigator.push(context,
        MaterialPageRoute(builder: (context) => UserProfile(id, hisname)));
  }

  void updateActivity() {
    FirebaseFirestore.instance
        .collection('Users')
        .doc(myid.loggedInUser.uid)
        .update({
      'activity': 'none',
    });
  }

  Future<void> updateLocation() async {
    FirebaseFirestore.instance
        .collection('Users')
        .doc(myid.loggedInUser.uid)
        .update({
      //'altitude': 0.0,
      //'longitude': 0.0,
      'location': {
        'latitude': 0.0,
        'longitude': 0.0,
      }
    });
  }
/*
  calculateDistance(lat2, lon2) {
    var p = 0.017453292519943295;
    var c = cos;
    var a = 0.5 -
        c((lat2 - widget.lat) * p) / 2 +
        c(widget.lat * p) * c(lat2 * p) * (1 - c((lon2 - widget.long) * p)) / 2;
    return 12742 * asin(sqrt(a));
  }
*/

  String distance(double lat2, double lon2, String unit) {
    double theta = widget.long - lon2;
    double dist = sin(deg2rad(widget.lat)) * sin(deg2rad(lat2)) +
        cos(deg2rad(widget.lat)) * cos(deg2rad(lat2)) * cos(deg2rad(theta));
    dist = acos(dist);
    dist = rad2deg(dist);
    dist = dist * 60 * 1.1515;
    if (unit == 'K') {
      dist = dist * 1.609344;
    } else if (unit == 'M') {
      dist = dist * 1.609344 * 1000;
    } else if (unit == 'N') {
      dist = dist * 0.8684;
    }
    return dist.toStringAsFixed(2);
  }

  double deg2rad(double deg) {
    return (deg * pi / 180.0);
  }

  double rad2deg(double rad) {
    return (rad * 180.0 / pi);
  }

  @override
  void initState() {
    _data = getUsers();
    WidgetsBinding.instance.addObserver(this);
    super.initState();
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    FirebaseFirestore.instance
        .collection('Users')
        .doc(myid.loggedInUser.uid)
        .update({
      'activity': 'none',
      'location': {
        'latitude': 0.0,
        'longitude': 0.0,
      }
    });
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      //   drawer: Menu(),
      appBar: AppBar(
        title: Text(widget.activity),
        backgroundColor: Colors.black,
      ),
      /*  floatingActionButton: FloatingActionButton(
          backgroundColor: Colors.black,
          //child: Icon(FlutterIcons.marker_cancel_mco),
          child: Text(
            'X',
            style: TextStyle(
              fontSize: 22,
            ),
          ),
          onPressed: () {
            updateActivity();
            updateLocation();
         /*   Navigator.pushReplacement(
                context, MaterialPageRoute(builder: (context) => Activities()));*/

                Navigator.pop(context);
          }), */
      body: RefreshIndicator(
        onRefresh: () {
          setState(() {
            _data = getUsers();
          });
          return _data;
        },
        child: Container(
          child: FutureBuilder(
              future: _data,
              builder: (_, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return
                      // child: Text('Loading...'),
                      // child: Text(''),
                      Center(child: CircularProgressIndicator());
                } else {
                  return ListView.builder(
                      itemCount: snapshot.data.length,
                      itemBuilder: (_, index) {
                        return ListTile(
                          leading: CircleAvatar(
                              backgroundColor: Colors.transparent,
                              backgroundImage: snapshot
                                          .data[index].data['photoUrl'] ==
                                      ''
                                  ? AssetImage(
                                      'assets/defaultProfilePicture.png')
                                  : NetworkImage(snapshot.data[index].data[
                                      'photoUrl'])), // no matter how big it is, it won't overflow
                          title: Padding(
                            padding: const EdgeInsets.only(top: 5),
                            child: Text(
                              snapshot.data[index].data['name'],
                              style: TextStyle(
                                fontSize: 28,
                                fontFamily: 'Bangers',
                              ),
                            ),
                          ),

                          subtitle: Container(
                            child: Row(
                              children: [
                                Text(distance(
                                            snapshot.data[index]
                                                .data['location']['latitude'],
                                            snapshot.data[index]
                                                .data['location']['longitude'],
                                            'M')
                                        .toString() +
                                    ' m'),
                              ],
                            ),
                          ),
                          onTap: () => navigateToUser(
                              snapshot.data[index].data['id'],
                              snapshot.data[index].data['name']),
                        );
                      });
                }
              }),
        ),
      ),
    );
  }
}
*/