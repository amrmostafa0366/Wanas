Padding(
              padding: const EdgeInsets.only(right: 10),
              child: DropdownButtonHideUnderline(
                child: DropdownButton(
                  icon: Icon(
                    Icons.more_vert,
                    color: Colors.white,
                  ),
                  items: [
                    DropdownMenuItem(
                      child: Container(
                        child: Row(
                          children: <Widget>[
                            Icon(Icons.person),
                            SizedBox(width: 5),
                            Text('View profile'),
                          ],
                        ),
                      ),
                      value: 'view profile',
                    ),
                    DropdownMenuItem(
                      child: Container(
                        child: Row(
                          children: <Widget>[
                            Icon(Icons.delete),
                            SizedBox(width: 5),
                            Text('Clear chat'),
                          ],
                        ),
                      ),
                      value: 'clear chat',
                    ),
                    DropdownMenuItem(
                      child: Container(
                        child: Row(
                          children: <Widget>[
                            Icon(Icons.report_gmailerrorred_outlined),
                            SizedBox(width: 5),
                            Text('Report'),
                          ],
                        ),
                      ),
                      value: 'report',
                    ),
                  ],
                  onChanged: (itemIdentifier) {
                    if (itemIdentifier == 'view profile') {
                      Navigator.of(context).push(MaterialPageRoute(
                          builder: (BuildContext context) =>
                              ViewProfile(widget.peerUserId, widget.name)));
                    } else if (itemIdentifier == 'clear chat') {
                   /*   Firestore.instance
                          .collection('Users')
                          .document(widget.currentUserId)
                          .collection('chats')
                          .document(widget.peerUserId)
                          .collection('messages')
                          .delete(); */

                          Firestore.instance
                          .collection('Users')
                          .document(widget.currentUserId)
                          .collection('chats')
                          .document(widget.peerUserId)
                          .collection('messages')
                          .getDocuments()
                          .then((snapshot) {
                        for (DocumentSnapshot ds in snapshot.documents) {
                          ds.reference.delete();
                        }
                      });

                    } else if (itemIdentifier == 'report') {
                      
                    }
                  },
                ),
              ),
            ),



            ///////////////////////


//////////////////////////////////////not working/////////////////////////////////////////

            Padding(
              padding: const EdgeInsets.only(right: 10),
              child: GestureDetector(
                child:Icon(
                      Icons.more_vert,
                      color: Colors.white,
                    ),
                onTap:(){
                   Container(
                   child: DropdownButtonHideUnderline(
                    child: DropdownButton(
                      /*icon: Icon(
                        Icons.more_vert,
                        color: Colors.white,
                      ),*/
                      items: [
                        DropdownMenuItem(
                          child: Container(
                            child: Row(
                              children: <Widget>[
                                Icon(Icons.person),
                                SizedBox(width: 5),
                                Text('View profile'),
                              ],
                            ),
                          ),
                          value: 'view profile',
                        ),
                        DropdownMenuItem(
                          child: Container(
                            child: Row(
                              children: <Widget>[
                                Icon(Icons.delete),
                                SizedBox(width: 5),
                                Text('Clear chat'),
                              ],
                            ),
                          ),
                          value: 'clear chat',
                        ),
                        DropdownMenuItem(
                          child: Container(
                            child: Row(
                              children: <Widget>[
                                Icon(Icons.report_gmailerrorred_outlined),
                                SizedBox(width: 5),
                                Text('Report'),
                              ],
                            ),
                          ),
                          value: 'report',
                        ),
                      ],
                      onChanged: (itemIdentifier) {
                        if (itemIdentifier == 'view profile') {
                          Navigator.of(context).push(MaterialPageRoute(
                              builder: (BuildContext context) =>
                                  ViewProfile(widget.peerUserId, widget.name)));
                        } else if (itemIdentifier == 'clear chat') {
                       /*   Firestore.instance
                              .collection('Users')
                              .document(widget.currentUserId)
                              .collection('chats')
                              .document(widget.peerUserId)
                              .collection('messages')
                              .delete(); */

                              Firestore.instance
                              .collection('Users')
                              .document(widget.currentUserId)
                              .collection('chats')
                              .document(widget.peerUserId)
                              .collection('messages')
                              .getDocuments()
                              .then((snapshot) {
                            for (DocumentSnapshot ds in snapshot.documents) {
                              ds.reference.delete();
                            }
                          });

                        } else if (itemIdentifier == 'report') {
                          
                        }
                      },
                    ),
                ),
                 );
                }
              ),
            ),



            /////////////////////////////////////////////


            StreamBuilder(
                          stream: Firestore.instance
                              .collection('Users')
                              .document(widget.currentUserId)
                              .collection('chats')
                              .document(widget.peerUserId)
                              .snapshots(),
                          builder: (context, snapshot) {
                            if (!snapshot.hasData ||
                                snapshot.connectionState ==
                                    ConnectionState.waiting) {
                              /* return Center(
                                    child: CircularProgressIndicator(),
                                  );  */
                              return Text(typ,
                                  style: TextStyle(
                                      color: Colors.white,
                                      fontSize:
                                          MediaQuery.of(context).size.width *
                                              .04));
                            }
                            String status = snapshot.data['type'];
                            if (typ == 'offline') {
                              return Text(typ,



                              ///////////////

StreamBuilder<QuerySnapshot>(
              stream: Firestore.instance
                  .collection('categoryPath')
                  .snapshots(),
              builder: (BuildContext context,
                  AsyncSnapshot<QuerySnapshot> categorySnapshot) {
                //get data from categories

                if (!categorySnapshot.hasData) {
                  return const Text('Loading...');
                }

                //put all categories in a map
                Map<String, Category> categories = Map();
                categorySnapshot.data.documents.forEach((c) {
                  categories[c.documentID] =
                      Category.fromJson(c.documentID, c.data);
                });

                //then from objects

                return StreamBuilder<QuerySnapshot>(
                  stream: Firestore.instance
                      .collection('objectsPath')
                      .where('day', isGreaterThanOrEqualTo: _initialDate)
                      .where('day', isLessThanOrEqualTo: _finalDate)
                      .snapshots(),
                  builder: (BuildContext context,
                      AsyncSnapshot<QuerySnapshot> objectsSnapshot) {
                    if (!objectsSnapshot.hasData)
                      return const Text('Loading...');

                    final int count =
                        objectsSnapshot.data.documents.length;
                    return Expanded(
                      child: Container(
                        child: Card(
                          elevation: 3,
                          child: ListView.builder(
                              padding: EdgeInsets.only(top: 0),
                              itemCount: count,
                              itemBuilder: (_, int index) {
                                final DocumentSnapshot document =
                                    objectsSnapshot.data.documents[index];
                                Object object = Object.fromJson(
                                    document.documentID, document.data);

                                return Column(
                                  children: <Widget>[
                                    Card(
                                      margin: EdgeInsets.only(
                                          left: 0, right: 0, bottom: 1),
                                      shape: RoundedRectangleBorder(
                                        borderRadius: BorderRadius.all(
                                            Radius.circular(0)),
                                      ),
                                      elevation: 1,
                                      child: ListTile(
                                        onTap: () {},
                                        title: Text(object.description,
                                            style: TextStyle(fontSize: 20)),
//here is the magic, i get the category name using the map 
of the categories and the category id from the object
                                        subtitle: Text(
                                          categories[object.categoryId] !=
                                                  null
                                              ? categories[
                                                      object.categoryId]
                                                  .name
                                              : 'Uncategorized',
                                          style: TextStyle(
                                              color: Theme.of(context)
                                                  .primaryColor),
                                        ),

                                      ),
                                    ),
                                  ],
                                );
                              }),
                        ),
                      ),
                    );          